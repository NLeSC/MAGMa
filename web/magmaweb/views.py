import json
from pyramid.response import Response
from pyramid.view import view_config
from pyramid.httpexceptions import HTTPNotFound, HTTPFound
from pyramid.security import unauthenticated_userid
from magmaweb.job import make_job_factory
from magmaweb.user import get_jobs

@view_config(route_name='home', renderer='home.mak', request_method='GET', permission='view')
def home(request):
    """Returns homepage on GET. """
    return {'userid':unauthenticated_userid(request)}

@view_config(route_name='defaults.json', renderer="json", permission='view')
def defaults(request):
    """ Returns defaults settings to run a job"""
    defaults = dict(
                    n_reaction_steps=2,
                    metabolism_types=['phase1', 'phase2'],
                    ionisation_mode=1,
                    skip_fragmentation=False,
                    ms_intensity_cutoff=1000000.0,
                    msms_intensity_cutoff=0.1,
                    mz_precision=0.001,
                    use_all_peaks=False,
                    abs_peak_cutoff=1000,
                    rel_peak_cutoff=0.01,
                    max_ms_level=10,
                    precursor_mz_precision=0.005,
                    max_broken_bonds=4
                    )
    return {
            'success': True,
            'data': defaults
            }

class Views(object):
    def __init__(self, request):
        self.request = request
        self.job_factory = make_job_factory(request.registry.settings)

    @view_config(route_name='uploaddb', renderer='uploaddb.mak', permission='run')
    def uploaddb(self):
        """Upload a sqlitedb as ``db_file`` param in POST request and redirects to job results page"""
        if (self.request.method == 'POST'):
            job = self.job_factory.fromDb(self.request.POST['db_file'].file)
            job.owner(unauthenticated_userid(self.request))
            return HTTPFound(location=self.request.route_url('results', jobid=job.id))
        else:
            return {}

    @view_config(route_name='jobfromscratch', permission='run')
    def jobfromscratch(self):
        """ Initializes a new job and redirects to its results page"""
        job = self.job_factory.fromScratch()
        job.owner(unauthenticated_userid(self.request))
        return HTTPFound(location=self.request.route_url('results', jobid=job.id))

    def jobid(self):
        return self.request.matchdict['jobid']

    @view_config(route_name='status', renderer='status.mak', permission='run')
    @view_config(route_name='status.json', renderer='json', permission='run')
    def job_status(self):
        """Returns status of a job

        Example json response:

        .. code-block:: python

            {
                "status" : "RUNNING",
                "jobid" : "b1eee101-dcc6-435e-baa8-d35e688c408e"
            }

        """
        jobid = self.jobid()
        jobstate = self.job_factory.state(jobid)
        return dict(status=jobstate, jobid=jobid)

    @view_config(route_name='jobs', permission='view', renderer='jobs.mak')
    def jobs(self):
        return {'jobs': get_jobs(unauthenticated_userid(self.request)) }

class JobViews(object):
    """Views for pyramid based web application with job"""
    def __init__(self, job, request):
        self.request = request
        self.job = job

    @view_config(route_name='results', renderer='results.mak', permission='view')
    def results(self):
        """Returns results page"""
        return dict(
                    run=self.job.runInfo(),
                    maxmslevel=self.job.maxMSLevel(),
                    jobid=self.job.id
                    )

    @view_config(route_name='metabolites.json', renderer='json', permission='view')
    def metabolitesjson(self):
        """Returns json document with metabolites, which can be used in a extjs store

        request.params:

        `start`
            Offset
        `limit`
            Maximum nr of metabolites to return
        `scanid`
            Only return metabolites that have hits in scan with this identifier. Adds score column.
        `filter`
            Json encoded string which is generated by ExtJS component Ext.ux.grid.FiltersFeature
        `sort`
            How to sort metabolites. Json encoded string which is an array of objects. Eg.

        .. code-block:: python

                [{"property":"probability","direction":"DESC"},{"property":"metid","direction":"ASC"}]

        Example response:

        .. code-block:: python

            {
               "scans" : [
                  {
                     "id" : 1787,
                     "rt" : 42.6626666666667
                  },
                  {
                     "id" : 1789,
                     "rt" : 42.7061666666667
                  }
               ],
               "total" : 2,
               "rows" : [
                  {
                     "mol" : "molblock ...",
                     "nhits" : null,
                     "metid" : 23,
                     "probability" : 0.248155,
                     "origin" : "5-(3,4)-dihydroxyphenyl-g-valerolactone (F)",
                     "score" : 3,
                     "smiles" : "O=C(O)C1OC(Oc2c(O)cc(CC3OCCC3)cc2)C(O)C(O)C1O",
                     "level" : 1,
                     "isquery" : false,
                     "molformula" : "C17H22O9",
                     "logp" : -0.615300000000001,
                     "mim" : 370.1263823051,
                     "nr_scans" : 2,
                     "reactionsequence" : "O-glucuronidation_(aromatic_hydroxyl)"
                  },
                  {
                     "mol" : " molblock ...",
                     "nhits" : null,
                     "metid" : 24,
                     "probability" : 0.248155,
                     "origin" : "5-(3,4)-dihydroxyphenyl-g-valerolactone (F)",
                     "score" : 3,
                     "smiles" : "O=C(O)C1OC(Oc2cc(CC3OCCC3)ccc2O)C(O)C(O)C1O",
                     "level" : 1,
                     "isquery" : false,
                     "molformula" : "C17H22O9",
                     "logp" : -0.615300000000001,
                     "mim" : 370.1263823051,
                     "nr_scans" : 2,
                     "reactionsequence" : "O-glucuronidation_(aromatic_hydroxyl)"
                  }
               ]
            }

        """
        request = self.request
        scanid = request.params['scanid'] if ('scanid' in request.params) else None
        filters = json.loads(request.params['filter']) if ('filter' in request.params) else []
        sorts = json.loads(request.params['sort']) if ('sort' in request.params) else []
        metabolites = self.job.metabolites(
            start=int(request.params['start']),
            limit=int(request.params['limit']),
            scanid=scanid, filters=filters, sorts=sorts
        )
        scans = self.job.scansWithMetabolites(filters=filters)
        totalUnfiltered = self.job.metabolitesTotalCount()
        return { 'totalUnfiltered': totalUnfiltered, 'total':metabolites['total'], 'rows':metabolites['rows'], 'scans':scans}

    @view_config(route_name='metabolites.csv', permission='view')
    def metabolitescsv(self):
        """ Same as metabolitesjson(), but returns csv file instead of a json document """
        mets = self.metabolitesjson()
        csv = self.job.metabolites2csv(mets['rows'])
        response = Response(content_type='text/csv', body=csv.getvalue())
        # response.app_iter does not work on StringIO, so use response.body
        # response.app_iter = csv
        return response

    @view_config(route_name='metabolites.sdf', permission='view')
    def metabolitessdf(self):
        """ Same as metabolitesjson(), but returns sdf file instead of a json document """
        mets = self.metabolitesjson()
        sdf = self.job.metabolites2sdf(mets['rows'])
        response = Response(content_type='chemical/x-mdl-sdfile', charset='utf-8', body=sdf)
        return response

    @view_config(route_name='chromatogram.json', renderer='json')
    def chromatogramjson(self):
        """Returns json object with the id, rt and basepeakintensity for each lvl1 scan

        Example response:

        .. code-block:: python

            {
                "scans": [{
                    "rt": 0.013115,
                    "intensity": 14556.6,
                    "id": 1
                }, {
                    "rt": 0.027853333333333334,
                    "intensity": 14144.9,
                    "id": 2
                }],
                "cutoff": 200000.0
            }
        """
        return self.job.chromatogram()

    @view_config(route_name='mspectra.json', renderer='json', permission='view')
    def mspectrajson(self):
        """Returns json object with peaks of a scan

        Also returns the cutoff applied to the scan
        and mslevel, precursor.id (parent scan id) and precursor.mz

        request.matchdict['scanid']
            Scan identifier of scan of which to return the mspectra

        request.params.mslevel
            Ms level on which the scan must be. Optional.

        Example response:

        .. code-block:: python

            {
               "cutoff" : 200000,
               "precursor" : {
                  "mz" : null,
                  "id" : 0
               },
               "mslevel" : 1,
               "peaks" : [
                  {
                     "mz" : 113.024574279785,
                     "intensity" : 32167.611328125
                  },
                  {
                     "mz" : 128.03547668457,
                     "intensity" : 53636.15625
                  }
               ]
            }

        """
        scanid = self.request.matchdict['scanid']
        mslevel = None
        if ('mslevel' in self.request.params):
            mslevel = self.request.params['mslevel']
        from magmaweb.job import ScanNotFound
        try:
            return self.job.mspectra(scanid, mslevel)
        except ScanNotFound:
            raise HTTPNotFound()

    @view_config(route_name='extractedionchromatogram.json', renderer='json', permission='view')
    def extractedionchromatogram(self):
        """Returns json object with the extracted ion chromatogram for a metabolite and the id,rt of scans which have metabolite hits

        request.matchdict['metid']
            Metabolite identifier

        Example response:

        .. code-block:: python

             {
               "scans" : [
                  {
                     "id" : 1787,
                     "rt" : 42.6626666666667
                  },
                  {
                     "id" : 1789,
                     "rt" : 42.7061666666667
                  }
               ],
               "chromatogram" : [
                  {
                     "intensity" : 0,
                     "rt" : 0.013115
                  },
                  {
                     "intensity" : 0,
                     "rt" : 0.0278533333333333
                  }
               ]
            }

        """
        metid = self.request.matchdict['metid']
        return {
            'chromatogram': self.job.extractedIonChromatogram(metid),
            'scans': self.job.scansWithMetabolites(metid=metid)
        }

    @view_config(route_name='fragments.json', renderer='json', permission='view')
    def fragments(self):
        """Returns json object with metabolites and its lvl2 fragments when ``node`` is not set
        When node is set then returns the children fragments which have node as parent fragment

        Can be used in a Extjs.data.TreeStore.
        From request.matchdict following keys are used:

        ``scanid``
            Fragments on scan with this identifier

        ``metid``
            Fragments of metabolite with this identifier

        ``node``
            The fragment identifier to fetch children fragments for.

        Example response when node='':

        .. code-block:: python

            {
               "expanded" : true,
               "children" : [
                  {
                     "deltah" : -1,
                     "mol" : "molblock ...",
                     "metid" : 23,
                     "fragid" : 5,
                     "score" : 3,
                     "children" : [
                        {
                           "deltah" : -2,
                           "mol" : "molblock ...",
                           "metid" : 23,
                           "fragid" : 6,
                           "score" : 2,
                           "mass" : 115.039519091,
                           "scanid" : 1790,
                           "expanded" : true,
                           "mz" : 113.024360656738,
                           "mslevel" : 2,
                           "atoms" : "14,15,16,20,22,23,24,25",
                           "leaf" : true
                        }
                     ],
                     "mass" : 370.1263823051,
                     "scanid" : 1789,
                     "expanded" : true,
                     "mz" : 369.119262695312,
                     "mslevel" : 1,
                     "atoms" : "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25",
                     "leaf" : false
                  }
               ]
            }

        Example response when node!='':

        .. code-block:: python

                [
                    {
                       "deltah" : -2,
                       "mol" : "molblock ...",
                       "metid" : 23,
                       "fragid" : 6,
                       "score" : 2,
                       "mass" : 115.039519091,
                       "scanid" : 1790,
                       "expanded" : true,
                       "mz" : 113.024360656738,
                       "mslevel" : 2,
                       "atoms" : "14,15,16,20,22,23,24,25",
                       "leaf" : true
                    }
                 ]

        """
        request = self.request
        from magmaweb.job import FragmentNotFound
        try:
            fragments = self.job.fragments(
                scanid=request.matchdict['scanid'],
                metid=request.matchdict['metid'],
                node=request.params['node']
            )
            return fragments
        except FragmentNotFound:
            raise HTTPNotFound()


    @view_config(route_name='stderr.txt')
    def stderr(self):
        """Returns file object of stderr.txt file of job"""
        response = Response(content_type='text/plain')
        response.app_iter = self.job.stderr()
        return response

    @view_config(route_name='runinfo.json', renderer="json", permission='view')
    def runinfojson(self):
        """ Returns settings used for job run or if job has not run the default value """
        r = self.job.runInfo()
        if (r is None):
            return defaults(self.request)
        else:
            d = defaults(self.request)['data']
            return {
                      'success': True,
                      'data': dict(
                                   n_reaction_steps=r.n_reaction_steps if r.n_reaction_steps else d['n_reaction_steps'],
                                   metabolism_types=r.metabolism_types.split(',') if r.metabolism_types else d['metabolism_types'],
                                   ionisation_mode=r.ionisation_mode if r.ionisation_mode else d['ionisation_mode'],
                                   skip_fragmentation=r.skip_fragmentation if r.skip_fragmentation else d['skip_fragmentation'],
                                   ms_intensity_cutoff=r.ms_intensity_cutoff if r.ms_intensity_cutoff else d['ms_intensity_cutoff'],
                                   msms_intensity_cutoff=r.msms_intensity_cutoff if r.msms_intensity_cutoff else d['msms_intensity_cutoff'],
                                   mz_precision=r.mz_precision if r.mz_precision else d['mz_precision'],
                                   use_all_peaks=r.use_all_peaks if r.use_all_peaks else d['use_all_peaks'],
                                   abs_peak_cutoff=r.abs_peak_cutoff if r.abs_peak_cutoff else d['abs_peak_cutoff'],
                                   rel_peak_cutoff=r.rel_peak_cutoff if r.rel_peak_cutoff else d['rel_peak_cutoff'],
                                   max_ms_level=r.max_ms_level if r.max_ms_level else d['max_ms_level'],
                                   precursor_mz_precision=r.precursor_mz_precision if r.precursor_mz_precision else d['precursor_mz_precision'],
                                   max_broken_bonds=r.max_broken_bonds if r.max_broken_bonds else d['max_broken_bonds']
                                   )
                    }

