<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" xmlns:tal="http://xml.zope.org/namespaces/tal">
<head>
  <title>MSygma - Results</title>
  <meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/>
<link rel="stylesheet" href="${request.static_url('sygma:static/ChemDoodleWeb/install/ChemDoodleWeb.css')}" type="text/css">
<link rel="stylesheet" href="${request.static_url('sygma:static/ext-4.0.7-gpl/resources/css/ext-all.css')}" type="text/css">
<link rel="stylesheet" type="text/css" href="${request.static_url('sygma:static/ext-4.0.7-gpl/examples/ux/grid/css/GridFilters.css')}" />
<link rel="stylesheet" type="text/css" href="${request.static_url('sygma:static/ext-4.0.7-gpl/examples/ux/grid/css/RangeMenu.css')}" />
<script type="text/javascript" src="${request.static_url('sygma:static/ext-4.0.7-gpl/bootstrap.js')}"></script>
<script type="text/javascript" src="${request.static_url('sygma:static/ChemDoodleWeb/install/ChemDoodleWeb-libs.js')}"></script>
<script type="text/javascript" src="${request.static_url('sygma:static/ChemDoodleWeb/src/ChemDoodleWeb-unpacked.js')}"></script>
<script type="text/javascript" src="${request.static_url('sygma:static/mbostock-d3-2f6d2fa/d3.js')}"></script>
<style type="text/css">

path.line {
  fill: none;
  stroke: #66d;
  stroke-width: 2px;
}

.axis {
  shape-rendering: crispEdges;
}

.y.axis line, .y.axis path, .x.axis line, .x.axis path {
  fill: none;
  stroke: #ccc;
}

.peaks {
  fill: none;
  stroke-width: 1px;
  stroke: "#111";
}

.cutoffline {
  fill: none;
  stroke-width: 1px;
  stroke: #ddd;
}

line.peak {
  stroke-width: 2px;
}

path.marker {
  stroke: lightgreen;
  fill: none;
  stroke-width: 1.5px;
}

.selectedscan, .selectedpeak {
  stroke: darkgreen !important;
  fill: darkgreen !important;
}

#fragmentgrid .x-grid-cell-inner{
    height: 106px !important;
}

</style><script type="text/javascript">

Ext.Loader.setConfig({
  enabled: true,
  paths: {
    'Ext': '${request.static_url('sygma:static/')}',
    'Ext.ux': '${request.static_url('sygma:static/ext-4.0.7-gpl/examples/ux')}'
  }
});
Ext.require([
    'Ext.ux.grid.FiltersFeature',
]);

Ext.onReady(function () {
  Ext.define('Metabolite', {
    idProperty: 'metid',
    extend:'Ext.data.Model',
    fields: [{
      name: 'metid',
    },{
      name: 'mol', type:'string'
    },{
      name: 'level'
    },{
      name: 'probability'
    },{
      name: 'reactionsequence'
    },{
      name: 'smiles'
    },{
      name: 'molformula'
    },{
      name: 'isquery', type: 'bool'
    },{
      name: 'origin'
    },{
      name: 'nhits'
    },{
      name: 'atoms', defaultValue: [] // array of atom indexes of molecule which are the substructure of the query
    },{
      name: 'nr_scans', type:'number'
    }]
  });

  var pageSize = 10;
  var mstore = Ext.create('Ext.data.Store', {
    storeId:'sampleStore',
    model:'Metabolite',
    pageSize: pageSize,
    proxy: {
        type: 'ajax',
        url: '${request.route_url('metabolites.json')}',
        reader: {
            type: 'json',
            root: 'rows',
            idProperty: 'metid'
        }
    },
    sorters: [{
      property: 'probability',
      direction: 'DESC'
    },{
      property: 'metid',
      direction: 'ASC'
    }],
    autoLoad: true,
    remoteSort: true,
    remoteFilter: true,
 });

  var molcol = Ext.create('Ext.esc.ChemDoodleColumn', {
   text: 'Molecule', dataIndex: 'mol',
   width: 162
  });

  var mfilters = Ext.create('Ext.ux.grid.FiltersFeature',{
    encode: true,
  });

  var mgrid = Ext.create('Ext.grid.Panel', {
    id: 'metabolitegrid',
    store: mstore,
    selType:'checkboxmodel',
    multiSelect: false,
    autoScroll: true,
    columns: [
      {text: 'ID', dataIndex: 'metid', hidden: true},
      molcol,
      {text: 'Level', dataIndex: 'level', filter: { type: 'list',  options: [0,1,2,3] }, hidden:true},
      {text: 'Probability', dataIndex: 'probability', filter: { type: 'numeric' }},
      {text: 'Reaction seq.', dataIndex: 'reactionsequence', flex:1, filter: { type: 'string' }},
      {text: 'Scans', dataIndex: 'nr_scans', filter: { type: 'numeric' }},
      {text: 'Smile', dataIndex: 'smiles', hidden:true},
      {text: 'Formula', dataIndex: 'molformula', filter: { type: 'string' }},
      {text: 'Query', dataIndex: 'isquery', xtype:'booleancolumn', trueText:'Yes', falseText:'No', filter: { type: 'boolean' }},
      {text: 'Name', dataIndex: 'origin', hidden: true, filter: { type: 'string' }},
    ],
    pageSize: pageSize,
    dockedItems: [{
      xtype: 'pagingtoolbar',
      store: mstore,   // same store GridPanel is using
      dock: 'bottom',
      displayInfo: true,
      items: [{
        text: 'Clear filters',
        handler: function() {
          mfilters.clearFilters();
          mstore.filter();
          lc_chart.clearScanSelection();
          fstore.removeAll();
          // TODO clear scan panels
        }
      }]
    }],
    plugins: [molcol],
    features: [mfilters],
	  listeners: {
	    select: function(rm,r) {
	      console.log('Selected metabolite '+r.data.metid);
	      clearFragments();
	      Ext.Ajax.request({
	        url: '${request.application_url}/metabolite/'+r.data.metid+'/scans.json',
	        success: function(response) {
  	            var obj = Ext.decode(response.responseText);
                if (obj.length) {
                  // if one scan has already been selected test if its a member of the scans of selected metabolite
                  // if so then show fragments
                  if (lc_chart.selectedscan != -1 && obj.indexOf(lc_chart.selectedscan) != -1) {
                    console.log('Selected metabolite and its one scan is selected');
                    loadFragments(lc_chart.selectedscan, r.data.metid);
                  } else {
                    console.log('Selecting scans of metabolite');
    		            lc_chart.selectScans(obj);
    		            // if metabolite has only one scan hit then show that scan and fragments
    		            if (obj.length == 1) {
    	                // show scan where metabolite had its hit
                      console.log('show scan where metabolite had its hit');
    	                loadMSpectra1(obj[0]);
    	                // show fragments with this metabolite and scan
                      console.log('show fragments of metabolite');
                      loadFragments(obj[0], r.data.metid);
    		            }
                  }
                } else {
                  Ext.Msg.alert('Metabolite has no hits', 'The selected query/metabolite was not found in the ms data');
                }
	        }
	      });
	    }
	  }
  });

  Ext.define('Fragment', {
    extend:'Ext.data.Model',
    idProperty: 'fragid',
    fields: [{
      name: 'fragid',
    },{
      name: 'metid',
    },{
      name: 'scanid'
    },{
      name: 'mz'
    },{
      name: 'mass'
    },{
      name: 'score'
    },{
      name: 'parentfragid'
    },{
      name: 'mol', type: 'string'
    },{
      name: 'atoms', defaultValue: [] // array of atom indexes of molecule which are the substructure of the query
    },{
      name: 'deltah'
    },{
      name: 'mslevel'
    }],
    hasMany: { model: 'Fragment', name:'children' }
  });

  function clearFragments() {
    console.log('Clearing fragments');
    fstore.getRootNode().removeAll();
  }

  function loadFragments(scanid, metid) {
    clearFragments();
    console.log('Show fragments of scan '+scanid+' metabolite '+metid);
    fstore.setProxy(fragmentProxy(scanid, metid));
    fstore.load();
  }

  // TODO chemdoodle does not work in tree due to store.getAt must replaced with store.getNodeById
  var hlspecs = new ChemDoodle.structures.VisualSpecifications();
  hlspecs.bonds_color = 'cyan';
  hlspecs.atoms_color = 'cyan';
  fmolcol = Ext.create('Ext.esc.ChemDoodleColumn', {
    text: 'Molecule', dataIndex: 'mol', atomIndex:'atoms',
    canvasClass: 'x-chemdoodle-cols2',
    width: 162,
    initCanvas:function(id, width, height, value,record) {
      var c = new ChemDoodle.TransformCanvas(id, width, height,true);
      var m = ChemDoodle.readMOL(value);
      record.data[this.atomIndex].split(',').forEach(function(qa) {
        // use highlight visual spec for atoms which are part of query
        m.atoms[qa].specs = hlspecs;
        // also highlight all bonds conected to query atoms
        m.getBonds(m.atoms[qa]).forEach(function(b) { b.specs = hlspecs; });
      });
      c.loadMolecule(m);
    }
  });

  // need to change url of fragment proxy so use a factory to create a new proxy foreach scan/metabolite combo
  function fragmentProxy(scanid, metid) {
    return Ext.create('Ext.data.proxy.Ajax', {
      // url is build when scan and metabolite are selected
      url: '${request.application_url}/fragments/'+scanid+'/'+metid+'.json',
      reader: {
          type: 'json',
          root: 'children',
          idProperty: 'fragid'
      }
    });
  }

  var fstore = Ext.create('Ext.data.TreeStore', {
    storeId:'fragmentStore',
    model:'Fragment',
    proxy: fragmentProxy(),
    autoLoad: false,
    root: { children : [] }, // prevent tree from autoloading
    listeners: {
      load: function(t, n, rs) {
        // show peaks in lvl1 scan
        if ('id' in n.data && n.data.id == 'root') {
          console.log('Loaded metabolite as fragment');
          // add mz of metabolites as markers to lvl1 scan
          ms_chart.setMarkers(
              rs.map(function(r) { return {mz: r.data.mz}; })
          );
        } else if (n.data.mslevel == 1) {
          console.log('Loaded lvl2 fragments of metabolite ');
          // load the scan of first child
          // add mz of metabolites as markers to lvl2 scan
          loadMSpectra2(
              rs[0].data.scanid,
              rs.map(function(r) { return {mz: r.data.mz}; })
          );
        } else if (n.data.mslevel == 2) {
          console.log('Loaded lvl3 fragments of metabolite ');
          // load the scan of first child
          // add mz of metabolites as markers to lvl3 scan
          loadMSpectra3(
              rs[0].data.scanid,
              rs.map(function(r) { return {mz: r.data.mz}; })
          );
        }
      }
    }
  });
  // TreeStore and Store have different function to fetch record by id, add getById to TreeStore
  fstore.getById = function(id) {
      return this.getNodeById(id);
  };

  var fgrid = Ext.create('Ext.tree.Panel', {
    id: 'fragmentgrid',
    store: fstore,
    selType:'checkboxmodel',
    multiSelect: false,
    rootVisible: false,
    useArrows: true,
    autoScroll: true,
    columns: [
      { text: 'Score', dataIndex: 'score', xtype: 'treecolumn', width: 120},
      fmolcol,
      { text: 'ID', dataIndex: 'fragid', hidden: true},
      { text: 'Scan', dataIndex: 'scanid', hidden: false},
      { text: 'Metabolite', dataIndex: 'metid', hidden: true},
      { text: 'M/z', dataIndex: 'mz'},
      { text: 'Mass', dataIndex: 'mass'},
      { text: 'Level', dataIndex: 'mslevel'},
      { text: 'H Delta', dataIndex: 'deltah'}
    ],
    plugins: [fmolcol],
    viewConfig: {
      // animate is default true causing refresh to be blocked
      // we use refresh event to render molecules
      // so after expanding a node the refresh was not fired causing all prev. rendered mols to disappear
      // now we turn off animate, so refresh events are fired and mols can be rendered
      // But still some nodes have no molecule and be fixes by collapse/expand or fmolcol.initCanvases()
      animate: false,
      blockRefresh: false,
      emptyText: 'Select a metabolite and scan, to show its fragments',
    },
    listeners: {
      select: function(rm,r) {
        console.log('Fragment selected '.r.id);
        // TODO show scan where fragment is a peak + select fragment parents in parent scans
      },
      // TODO on collapse clear child scans
    }
  });

  /**
   * Removes scan filter from metabolite store
   */
  function removeScanFilter() {
    var scanfilter;
    // see if already filtered on scanid then remove old filter
    if ('scanid' in mstore.getProxy().extraParams) {
      delete(mstore.getProxy().extraParams.scanid);
      mstore.loadPage(1);
    }
  }

  function loadMSpectra1(scanid) {
    console.log('Loading msspectra level 1 with id '+scanid);
    // load msspectra level 1
    d3.json('${request.application_url}/mspectra/'+scanid+'.json', function(data) {
      Ext.getCmp('mspectra1panel').header.setTitle('Scan '+scanid+' (Level 1)');
      ms_chart.setData(data);
      // TODO add markers of metabolites in this scan
      // If metabolite is selected then also select its fragment in scan
    });
  }

  function loadMSpectra2(scanid, markers) {
    console.log('Loading msspectra level 2 with id '+scanid);
    // load msspectra level 2
    d3.json('${request.application_url}/mspectra/'+scanid+'.json', function(data) {
      Ext.getCmp('mspectra2panel').header.setTitle('Scan '+scanid+' (Level 2)');
      ms_chart2.setData(data);
      ms_chart2.setMarkers(markers);
    });
  }

  function loadMSpectra3(scanid, markers) {
    console.log('Loading msspectra level 3 with id '+scanid);
    // load msspectra level 3
    d3.json('${request.application_url}/mspectra/'+scanid+'.json', function(data) {
      Ext.getCmp('mspectra3panel').header.setTitle('Scan '+scanid+' (Level 3)');
      ms_chart3.setData(data);
      ms_chart3.setMarkers(markers);
    });
  }

  // uses perl Finnigan package to make data
  // mzxml-unpack -r 1..1  F0060068.mzXML > F0060068.scan1.txt
  lc_chart = Ext.create('Ext.esc.Chromatogram', {
    cutoff: ${cutoff},
    listeners: {
      selectscan: function(scanid) {
        console.log('select scan '+scanid);
        removeScanFilter();
        // if metabolite has been selected then show fragments with this metabolite and scan
        // if metabolite has not been selected then filter mstore
        if (mgrid.getSelectionModel().selected.getCount() > 0) {
          loadFragments(scanid, mgrid.getSelectionModel().selected.getAt(0).data.metid);
        } else {
          mstore.getProxy().extraParams.scanid = scanid;
          mstore.loadPage(1);
        }
        loadMSpectra1(scanid);
      },
      unselectscan: function(scanid) {
        console.log('unselect scan '+scanid);
        removeScanFilter();
        // TODO unload mspectra1
      }
    }
  });
  d3.json('${request.route_url('chromatogram.json')}', function(data) {
    lc_chart.setData(data);
    d3.json('${request.route_url('chromatogram/hits.json')}', function(data) {
      lc_chart.setMarkers(data);
    });
  });

  // TODO look at run.n_reaction_steps to see how many levels are needed
  // Select a scan in the chromatogram
  ms_chart = Ext.create('Ext.esc.MSpectra', {
    listeners: {
      selectpeak: function(mz) {
        console.log('Selected lvl1 peak with m/z = '+mz);
      }
    }
  });
  // Select a fragment to show its level 2 scan
  ms_chart2 = Ext.create('Ext.esc.MSpectra', {
    listeners: {
      selectpeak: function(mz) {
        console.log('Selected lvl2 peak with m/z = '+mz);
      }
    }
  });
  // Select a fragment to show its level 3 scan
  ms_chart3 = Ext.create('Ext.esc.MSpectra', {
    listeners: {
      selectpeak: function(mz) {
        console.log('Selected lvl3 peak with m/z = '+mz);
      }
    }
  });

  Ext.define('Scan', {
    extend: 'Ext.data.Model',
    fields: [
      { name:'id', type: 'int' }, // num in mzxml
      { name:'msLevel', type: 'int' },
      { name:'precursorMz', type: 'float' }
    ]
  });

  scan_store = Ext.create('Ext.data.TreeStore', {
    model: 'Scan',
    proxy: {
      type: 'ajax',
      url: '${request.route_url('scantree.json')}'
    },
  });

  scan_tree = Ext.create('Ext.tree.Panel', {
    store: scan_store,
    rootVisible: false,
    columns: [{
      xtype: 'treecolumn',
      text: 'Scan',
      flex: 2,
      dataIndex: 'id',
    },{
      text: 'Level',
      dataIndex: 'msLevel',
      flex: 1,
    },{
      text: 'Precursor',
      dataIndex: 'precursorMz',
      flex: 1,
    }]
  });


// horizontal split
function rightleft() {

  var master_side = Ext.create('Ext.panel.Panel', {
        // master side
        region: 'center',
        layout: 'border',
        border: false,
        items:[{
            region:'center',
            title: 'Query molecules & Metabolites',
            layout: 'fit',
            border: false,
            items: [
              mgrid,
            ]
        },{
            title:'Chromatogram',
            region:'south',
            hideCollapseTool: true,
            collapsible: true,
            height: '50%',
            split: true,
            layout: 'fit',
            items:[lc_chart],
            border: false,
            tools:[{
              type:'maximize',
              tooltip: 'Reset zoom',
              handler: function() {
                lc_chart.resetZoom();
              }
            }]
        }]
  });

    var detail_side = Ext.create('Ext.panel.Panel', {
        // detail side
        region: 'east',
        split: true,
        collapsible: true,
        layout: 'border',
//        width: '50%',
        width: 600,
        hideCollapseTool: true,
        border: false,
        items:[{
            region: 'center',
            id: 'fragmentspanel',
            title: 'Fragments',
            items: [fgrid],
            layout: 'fit',
            border: false
        },{
          region:'south',
          height: '50%',
          layout: 'border',
          split: true,
          collapsible: true,
          hideCollapseTool: true,
          border: false,
          items:[{
//              title:'Scan - <a href="#">Scan321</a> >> Scan2324',
              id: 'mspectrapanel',
              region: 'center',
              layout: {
                  type: 'vbox',
                  align: 'stretch'
              },
              border: false,
              defaults: {
                flex: 1,
                layout:'fit',
                border: false
              },
              items:[{
               title: 'Scan ... (Level 1)',
               id: 'mspectra1panel',
               collapsible: true,
               tools:[{
	                 type:'maximize',
	                 tooltip: 'Reset zoom',
	                 handler: function() {
	                   ms_chart.resetZoom();
	                 }
	               }],
	               items: ms_chart
              },{
                title: 'Scan ... (Level 2)',
                id: 'mspectra2panel',
                items: ms_chart2,
                collapsible: true,
                tools:[{
                  type:'maximize',
                  tooltip: 'Reset zoom',
                  handler: function() {
                    ms_chart2.resetZoom();
                  }
                }]
              },{
                 title: 'Scan ... (Level 3)',
                 id: 'mspectra3panel',
	               items: ms_chart3,
	               collapsible: true,
	               tools:[{
	                 type:'maximize',
	                 tooltip: 'Reset zoom',
	                 handler: function() {
	                   ms_chart3.resetZoom();
	                 }
	               }]
              }]
//           },{
//               region:'east',
//               collapsible: true,
//               collapsed: true,
//               hideCollapseTool: true,
//               layout: 'fit',
//               width: '20%',
//               split: true,
// //              title:'Scans',
//               items:[scan_tree]
          }],
        }]
    });

  Ext.create('Ext.Viewport', {
    layout: 'border',
    items:[ master_side, detail_side ]
  });
}

rightleft();

});
</script>
</head>
<body>
</body>
</html>

