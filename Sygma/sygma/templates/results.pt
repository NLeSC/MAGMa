<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" xmlns:tal="http://xml.zope.org/namespaces/tal">
<head>
  <title>MSygma - Results</title>
  <meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/>
<link rel="stylesheet" href="${request.static_url('sygma:static/ChemDoodleWeb/install/ChemDoodleWeb.css')}" type="text/css">
<link rel="stylesheet" href="${request.static_url('sygma:static/ext-4.0.7-gpl/resources/css/ext-all.css')}" type="text/css">
<link rel="stylesheet" type="text/css" href="${request.static_url('sygma:static/ext-4.0.7-gpl/examples/ux/grid/css/GridFilters.css')}" />
<link rel="stylesheet" type="text/css" href="${request.static_url('sygma:static/ext-4.0.7-gpl/examples/ux/grid/css/RangeMenu.css')}" />
<script type="text/javascript" src="${request.static_url('sygma:static/ext-4.0.7-gpl/bootstrap.js')}"></script>
<script type="text/javascript" src="${request.static_url('sygma:static/ChemDoodleWeb/install/ChemDoodleWeb-libs.js')}"></script>
<script type="text/javascript" src="${request.static_url('sygma:static/ChemDoodleWeb/src/ChemDoodleWeb-unpacked.js')}"></script>
<script type="text/javascript" src="${request.static_url('sygma:static/mbostock-d3-2f6d2fa/d3.js')}"></script>
<style type="text/css">

path.line {
  fill: none;
  stroke: #66d;
  stroke-width: 2px;
}

.axis {
  shape-rendering: crispEdges;
}

.y.axis line, .y.axis path, .x.axis line, .x.axis path {
  fill: none;
  stroke: #ccc;
}

.peaks {
  fill: none;
  stroke-width: 1px;
  stroke: "#111";
}

.cutoffline {
  fill: none;
  stroke-width: 1px;
  stroke: #ddd;
}

line.peak {
  stroke-width: 2px;
}

path.marker {
  stroke: darkgreen;
  fill: none;
  stroke-width: 1.5px;
}

.selectedscan {
  fill: lightgreen !important;
}

</style><script type="text/javascript">

Ext.Loader.setConfig({
  enabled: true,
  paths: {
    'Ext': '${request.static_url('sygma:static/')}',
    'Ext.ux': '${request.static_url('sygma:static/ext-4.0.7-gpl/examples/ux')}'
  }
});
Ext.require([
    'Ext.ux.grid.FiltersFeature',
]);

Ext.onReady(function () {
  Ext.define('Metabolite', {
    extend:'Ext.data.Model',
    fields: [{
      name: 'metid',
    },{
      name: 'mol', type:'string'
    },{
      name: 'level'
    },{
      name: 'probability'
    },{
      name: 'reactionsequence'
    },{
      name: 'smiles'
    },{
      name: 'molformula'
    },{
      name: 'isquery', type: 'bool'
    },{
      name: 'origin'
    },{
      name: 'nhits'
    },{
      name: 'atoms', defaultValue: [] // array of atom indexes of molecule which are the substructure of the query
    }]
  });

  var pageSize = 10;
  var mstore = Ext.create('Ext.data.Store', {
    storeId:'sampleStore',
    model:'Metabolite',
    pageSize: pageSize,
    proxy: {
        type: 'ajax',
        url: '${request.route_url('metabolites.json')}',
        reader: {
            type: 'json',
            root: 'rows'
        }
    },
    sorters: [{
      property: 'probability',
      direction: 'DESC'
    },{
      property: 'metid',
      direction: 'ASC'
    }],
    autoLoad: true,
    remoteSort: true,
    remoteFilter: true,
 });

  var mfilters = {
    encode: true,
    ftype: 'filters'
  };

  var molcol = Ext.create('Ext.esc.ChemDoodleColumn', {
   text: 'Molecule', dataIndex: 'mol',
   width: 162
  });

  var mgrid = Ext.create('Ext.grid.Panel', {
    store: mstore,
    selType:'checkboxmodel',
    multiSelect:true,
    columns: [
      molcol,
      {text: 'Level', dataIndex: 'level', filter: { type: 'list',  options: [0,1,2,3] }, hidden:true },
      {text: 'Probability', dataIndex: 'probability', filter: { type: 'numeric' }},
      {text: 'Reaction seq.', dataIndex: 'reactionsequence', flex:1, filter: { type: 'string' }},
      {text: 'Smile', dataIndex: 'smiles', hidden:true},
      {text: 'Formula', dataIndex: 'molformula', filter: { type: 'string' }},
      {text: 'Query', dataIndex: 'isquery', xtype:'booleancolumn', trueText:'Yes', falseText:'No', filter: { type: 'boolean' }},
      {text: 'Name', dataIndex: 'origin', hidden: true, filter: { type: 'string' }},
    ],
    pageSize: pageSize,
    dockedItems: [{
      xtype: 'pagingtoolbar',
      store: mstore,   // same store GridPanel is using
      dock: 'bottom',
      displayInfo: true
    }],
    plugins: [molcol],
    features: [mfilters]
  });

  var fmolcol = Ext.create('Ext.esc.ChemDoodleColumn', {
    text: 'Molecule', dataIndex: 'mol',
    canvasClass: 'x-chemdoodle-cols2',
    width: 162
   });

  // TODO create fragment store
  var fstore = mstore;

  var fgrid = Ext.create('Ext.grid.Panel', {
   store: fstore,
   selType:'checkboxmodel',
   multiSelect:true,
   columns: [
     fmolcol,
     {text: 'Smile', dataIndex: 'smiles', width: 200 }
   ],
   pageSize: pageSize,
   dockedItems: [{
     xtype: 'pagingtoolbar',
     store: fstore,   // same store GridPanel is using
     dock: 'bottom',
     displayInfo: true
   }],
   plugins: [fmolcol],
 });

  // uses perl Finnigan package to make data
  // mzxml-unpack -r 1..1  F0060068.mzXML > F0060068.scan1.txt
  lc_chart = Ext.create('Ext.esc.Chromatogram', {
    cutoff: ${cutoff},
    listeners: {
      selectscan: function(scanid){
        console.log('select scan '+scanid);
      },
      unselectscan: function(scanid){
        console.log('unselect scan '+scanid);
      }
    }
  });
  d3.json('${request.route_url('chromatogram.json')}', function(data) {
    lc_chart.setData(data);
  });


  ms_chart = Ext.create('Ext.esc.MSpectra', {});
  d3.json("${request.route_url('mspectra.json',id=623)}", function(data) {
    ms_chart.setData(data);
  });
  ms_chart2 = Ext.create('Ext.esc.MSpectra', {});
  d3.json("${request.route_url('mspectra.json',id=3862)}", function(data) {
    ms_chart2.setData(data);
  });

  Ext.define('Scan', {
    extend: 'Ext.data.Model',
    fields: [
      { name:'id', type: 'int' }, // num in mzxml
      { name:'msLevel', type: 'int' },
      { name:'precursorMz', type: 'float' }
    ]
  });

  scan_store = Ext.create('Ext.data.TreeStore', {
    model: 'Scan',
    proxy: {
      type: 'ajax',
      url: '${request.route_url('scantree.json')}'
    },
  });

  scan_tree = Ext.create('Ext.tree.Panel', {
    store: scan_store,
    rootVisible: false,
    columns: [{
      xtype: 'treecolumn',
      text: 'Scan',
      flex: 2,
      dataIndex: 'id',
    },{
      text: 'Level',
      dataIndex: 'msLevel',
      flex: 1,
    },{
      text: 'Precursor',
      dataIndex: 'precursorMz',
      flex: 1,
    }]
  });

  Ext.define('Ext.ChemDoodle.ViewerCanvas', {
    extend: 'Ext.Component',
    onRender: function(ct) {
      if (!this.canvas) {
        this.canvas = ct.createChild({
          id: ct.id+'-canvas',
          tag: 'canvas',
          width: 300, height: 300
        })
        // disabled SimpleReactionLayout creates table with canvases using document.writeln
//        this.paper = new ChemDoodle.SimpleReactionLayout(ct.id+'-canvas', 300, 300);
        this.el = this.canvas;
//       } else {
//         console.log(ct.getWidth(), ct.getHeight());
//         this.canvas.setWidth(ct.getWidth());
//         this.canvas.setHeight(ct.getHeight());
//         this.canvas.dom.width = ct.getWidth();
//         this.canvas.dom.height = ct.getHeight();
//         this.paper.width = ct.getWidth();
//         this.paper.height = ct.getHeight();
//         this.paper.center();
//         this.paper.repaint();
      }
    }
  });

  network = Ext.create('Ext.ChemDoodle.ViewerCanvas', {
    title: 'Network',
  });

// horizontal split
function rightleft() {

  var master_side = Ext.create('Ext.panel.Panel', {
        // master side
        region: 'center',
        layout: 'border',
        border: false,
        items:[{
            region:'center',
            title: 'Query molecules & Metabolites',
            layout: 'fit',
            border: false,
            items: [
              mgrid,
            ]
        },{
            title:'Chromatogram',
            region:'south',
            hideCollapseTool: true,
            collapsible: true,
            height: '50%',
            split: true,
            layout: 'fit',
            items:[lc_chart],
            border: false,
            tools:[{
              type:'maximize',
              tooltip: 'Reset zoom',
              handler: function() {
                lc_chart.resetZoom();
              }
            }]
        }]
  });

    var detail_side = Ext.create('Ext.panel.Panel', {
        // detail side
        region: 'east',
        split: true,
        collapsible: true,
        layout: 'border',
//        width: '50%',
        width: 600,
        hideCollapseTool: true,
        border: false,
        items:[{
            region: 'center',
            title: 'Fragments of Fragment1',
            items: [fgrid],
            layout: 'fit',
            border: false
        },{
          region:'south',
          height: '50%',
          layout: 'border',
          split: true,
          collapsible: true,
          hideCollapseTool: true,
          border: false,
          items:[{
//              title:'Scan - <a href="#">Scan321</a> >> Scan2324',
              region: 'center',
              layout: {
                  type: 'vbox',
                  align: 'stretch'
              },
              border: false,
              defaults: {
                flex: 1,
                layout:'fit',
                border: false
              },
              items:[{
               title: 'Scan 123 (Level 1)',
               collapsible: true,
               tools:[{
	                 type:'maximize',
	                 tooltip: 'Reset zoom',
	                 handler: function() {
	                   ms_chart.resetZoom();
	                 }
	               }],
	               items: ms_chart
              },{
                 title: 'Scan 12 (Level 2)',
	               items: ms_chart2,
	               collapsible: true,
	               tools:[{
	                 type:'maximize',
	                 tooltip: 'Reset zoom',
	                 handler: function() {
	                   ms_chart2.resetZoom();
	                 }
	               }]
              }]
//           },{
//               region:'east',
//               collapsible: true,
//               collapsed: true,
//               hideCollapseTool: true,
//               layout: 'fit',
//               width: '20%',
//               split: true,
// //              title:'Scans',
//               items:[scan_tree]
          }],
        }]
    });

  Ext.create('Ext.Viewport', {
    layout: 'border',
    items:[ master_side, detail_side ]
  });
}

rightleft();

});
</script>
</head>
<body>
</body>
</html>

